[
    {
        "title": "add-10",
        "url": "/2020/01/02/add-10/",
        "content": "**仓库目录的结构**\n```bash\nbranches/   分支管理目录\nconfig      当前项目仓木的配置信息\ndescription 当前项目的描述\nHEAD        当前项目仓库的当前版本信息\nhooks       当前项目仓库的钩子目录[可以利用这个目录下面的文件实现自己拉去代码到服务器]\ninfo        仓库相关信息\nobjects     仓库版本信息\nrefs        引用信息\n```\n\n* * *\n\n**配置用户名和邮箱**\n```bash\ngit config --global user.name 'jeremy'\ngit config --global user.email '865889915@qq.com'\n```\n![f72a05976e62de9760ff8884e34b46e0.png](en-resource://database/791:1)\n\n* * *\n\n**查看仓库状态**\n```bash\ngit status\n\ngit status –s 简约显示\n```\n\n* 红色表示新建文件或者新修改的文件,都在工作区.\n* 绿色表示文件在暂存区\n* 新建的`login.py`文件在工作区，需要添加到暂存区并提交到仓库区\n\n![ad28b346075e4738e79b474c4d5ef4bf.png](en-resource://database/789:1)\n\n上图表示： 暂时没有新文件需要提交到暂存区\n\n* * *\n\n**添加文件到暂存区**\n```bash\n  # 添加项目中所有文件\n  git add .\n  或者\n  # 添加指定文件\n  git add login.py\n```\n例如： 创建3个文件 ，并查看状态.\n\n* * *\n\n**提交到版本库**\n```bash\n git commit -am \"版本描述\"\n```\n\n* * *\n\n**手动删除文件**\n```bash\n手动操作删除 或者 在命令行下 使用 rm 文件名 删除 都是表示在工作区删除.\n对于这种删除,如果还原,则可以使用 git checkout 文件名\n```\n![b389bae423da525cfa708d04aa59fd7a.png](en-resource://database/794:1)\n\n* * *\n\n**版本删除**\n```bash\n如果使用 git rm 文件名, 这种操作属于暂存区删除,这种删除无法直接git checkout 文件名 来还原.\n如果直接执行git checkout 命令,则报错如下:\n```\n![5a38f5658fdfb97782184f8aeb3f0618.png](en-resource://database/793:1)\n\n```bash\n如果要还原在暂存区中删除的文件,必须先执行 git reset head\n```\n![14ea933479afc2006997a5e603dedc4a.png](en-resource://database/792:1)\n\n* * *\n\n**查看历史版本[查看日志]**\n```bash\ngit log   或者   git reflog\n \n过滤查看日志\n  git log –p \n  退出按【q】键\n  ctrl+f向下分页\n  ctrl+b 向上分页\n\n显示指定日期之后的日志   git log --after  '2018-11-6'\n显示指定日期之前的日志   git log --before '2018-11-6'\n\n指定显示指定开发者的日志  git log --author 'lisi'\n```\n\n* * *\n\n**回退版本**\n* * *\n* **方案一：**\n    * `HEAD`表示当前最新版本\n    * `HEAD^`表示当前最新版本的前一个版本\n    * `HEAD^^`表示当前最新版本的前两个版本，以此类推...\n    * `HEAD~1`表示当前最新版本的前一个版本\n    * `HEAD~10`表示当前最新版本的前10个版本，以此类推...\n\n```bash\ngit reset --hard HEAD^\n```\n\n"
    },
    {
        "title": "add-9",
        "url": "/2020/01/02/add-9/",
        "content": "**仓库目录的结构**\n```bash\nbranches/   分支管理目录\nconfig      当前项目仓木的配置信息\ndescription 当前项目的描述\nHEAD        当前项目仓库的当前版本信息\nhooks       当前项目仓库的钩子目录[可以利用这个目录下面的文件实现自己拉去代码到服务器]\ninfo        仓库相关信息\nobjects     仓库版本信息\nrefs        引用信息\n```\n\n* * *\n\n**配置用户名和邮箱**\n```bash\ngit config --global user.name 'jeremy'\ngit config --global user.email '865889915@qq.com'\n```\n![f72a05976e62de9760ff8884e34b46e0.png](en-resource://database/791:1)\n\n* * *\n\n**查看仓库状态**\n```bash\ngit status\n\ngit status –s 简约显示\n```\n\n* 红色表示新建文件或者新修改的文件,都在工作区.\n* 绿色表示文件在暂存区\n* 新建的`login.py`文件在工作区，需要添加到暂存区并提交到仓库区\n\n![ad28b346075e4738e79b474c4d5ef4bf.png](en-resource://database/789:1)\n\n上图表示： 暂时没有新文件需要提交到暂存区\n\n* * *\n\n**添加文件到暂存区**\n```bash\n  # 添加项目中所有文件\n  git add .\n  或者\n  # 添加指定文件\n  git add login.py\n```\n例如： 创建3个文件 ，并查看状态.\n\n* * *\n\n**提交到版本库**\n```bash\n git commit -am \"版本描述\"\n```\n\n* * *\n\n**手动删除文件**\n```bash\n手动操作删除 或者 在命令行下 使用 rm 文件名 删除 都是表示在工作区删除.\n对于这种删除,如果还原,则可以使用 git checkout 文件名\n```\n![b389bae423da525cfa708d04aa59fd7a.png](en-resource://database/794:1)\n\n* * *\n\n**版本删除**\n```bash\n如果使用 git rm 文件名, 这种操作属于暂存区删除,这种删除无法直接git checkout 文件名 来还原.\n如果直接执行git checkout 命令,则报错如下:\n```\n![5a38f5658fdfb97782184f8aeb3f0618.png](en-resource://database/793:1)\n\n```bash\n如果要还原在暂存区中删除的文件,必须先执行 git reset head\n```\n![14ea933479afc2006997a5e603dedc4a.png](en-resource://database/792:1)\n\n* * *\n\n**查看历史版本[查看日志]**\n```bash\ngit log   或者   git reflog\n \n过滤查看日志\n  git log –p \n  退出按【q】键\n  ctrl+f向下分页\n  ctrl+b 向上分页\n\n显示指定日期之后的日志   git log --after  '2018-11-6'\n显示指定日期之前的日志   git log --before '2018-11-6'\n\n指定显示指定开发者的日志  git log --author 'lisi'\n```\n\n* * *\n\n**回退版本**\n* * *\n* **方案一：**\n    * `HEAD`表示当前最新版本\n    * `HEAD^`表示当前最新版本的前一个版本\n    * `HEAD^^`表示当前最新版本的前两个版本，以此类推...\n    * `HEAD~1`表示当前最新版本的前一个版本\n    * `HEAD~10`表示当前最新版本的前10个版本，以此类推...\n\n```bash\ngit reset --hard HEAD^\n```\n"
    },
    {
        "title": "add-8",
        "url": "/2020/01/02/add-8/",
        "content": "**仓库目录的结构**\n```bash\nbranches/   分支管理目录\nconfig      当前项目仓木的配置信息\ndescription 当前项目的描述\nHEAD        当前项目仓库的当前版本信息\nhooks       当前项目仓库的钩子目录[可以利用这个目录下面的文件实现自己拉去代码到服务器]\ninfo        仓库相关信息\nobjects     仓库版本信息\nrefs        引用信息\n```\n\n* * *\n\n**配置用户名和邮箱**\n```bash\ngit config --global user.name 'jeremy'\ngit config --global user.email '865889915@qq.com'\n```\n![f72a05976e62de9760ff8884e34b46e0.png](en-resource://database/791:1)\n\n* * *\n\n**查看仓库状态**\n```bash\ngit status\n\ngit status –s 简约显示\n```\n\n* 红色表示新建文件或者新修改的文件,都在工作区.\n* 绿色表示文件在暂存区\n* 新建的`login.py`文件在工作区，需要添加到暂存区并提交到仓库区\n\n![ad28b346075e4738e79b474c4d5ef4bf.png](en-resource://database/789:1)\n\n上图表示： 暂时没有新文件需要提交到暂存区\n\n* * *\n\n**添加文件到暂存区**\n```bash\n  # 添加项目中所有文件\n  git add .\n  或者\n  # 添加指定文件\n  git add login.py\n```\n例如： 创建3个文件 ，并查看状态.\n\n* * *\n\n**提交到版本库**\n```bash\n git commit -am \"版本描述\"\n```\n\n* * *\n\n**手动删除文件**\n```bash\n手动操作删除 或者 在命令行下 使用 rm 文件名 删除 都是表示在工作区删除.\n对于这种删除,如果还原,则可以使用 git checkout 文件名\n```\n![b389bae423da525cfa708d04aa59fd7a.png](en-resource://database/794:1)\n\n* * *\n\n**版本删除**\n```bash\n如果使用 git rm 文件名, 这种操作属于暂存区删除,这种删除无法直接git checkout 文件名 来还原.\n如果直接执行git checkout 命令,则报错如下:\n```\n![5a38f5658fdfb97782184f8aeb3f0618.png](en-resource://database/793:1)\n\n```bash\n如果要还原在暂存区中删除的文件,必须先执行 git reset head\n```\n![14ea933479afc2006997a5e603dedc4a.png](en-resource://database/792:1)\n\n* * *\n\n**查看历史版本[查看日志]**\n```bash\ngit log   或者   git reflog\n \n过滤查看日志\n  git log –p \n  退出按【q】键\n  ctrl+f向下分页\n  ctrl+b 向上分页\n\n显示指定日期之后的日志   git log --after  '2018-11-6'\n显示指定日期之前的日志   git log --before '2018-11-6'\n\n指定显示指定开发者的日志  git log --author 'lisi'\n```\n\n* * *\n\n**回退版本**\n* * *\n* **方案一：**\n    * `HEAD`表示当前最新版本\n    * `HEAD^`表示当前最新版本的前一个版本\n    * `HEAD^^`表示当前最新版本的前两个版本，以此类推...\n    * `HEAD~1`表示当前最新版本的前一个版本\n    * `HEAD~10`表示当前最新版本的前10个版本，以此类推...\n\n```bash\ngit reset --hard HEAD^\n```\n"
    },
    {
        "title": "add-7",
        "url": "/2020/01/02/add-7/",
        "content": "**仓库目录的结构**\n```bash\nbranches/   分支管理目录\nconfig      当前项目仓木的配置信息\ndescription 当前项目的描述\nHEAD        当前项目仓库的当前版本信息\nhooks       当前项目仓库的钩子目录[可以利用这个目录下面的文件实现自己拉去代码到服务器]\ninfo        仓库相关信息\nobjects     仓库版本信息\nrefs        引用信息\n```\n\n* * *\n\n**配置用户名和邮箱**\n```bash\ngit config --global user.name 'jeremy'\ngit config --global user.email '865889915@qq.com'\n```\n![f72a05976e62de9760ff8884e34b46e0.png](en-resource://database/791:1)\n\n* * *\n\n**查看仓库状态**\n```bash\ngit status\n\ngit status –s 简约显示\n```\n\n* 红色表示新建文件或者新修改的文件,都在工作区.\n* 绿色表示文件在暂存区\n* 新建的`login.py`文件在工作区，需要添加到暂存区并提交到仓库区\n\n![ad28b346075e4738e79b474c4d5ef4bf.png](en-resource://database/789:1)\n\n上图表示： 暂时没有新文件需要提交到暂存区\n\n* * *\n\n**添加文件到暂存区**\n```bash\n  # 添加项目中所有文件\n  git add .\n  或者\n  # 添加指定文件\n  git add login.py\n```\n例如： 创建3个文件 ，并查看状态.\n\n* * *\n\n**提交到版本库**\n```bash\n git commit -am \"版本描述\"\n```\n\n* * *\n\n**手动删除文件**\n```bash\n手动操作删除 或者 在命令行下 使用 rm 文件名 删除 都是表示在工作区删除.\n对于这种删除,如果还原,则可以使用 git checkout 文件名\n```\n![b389bae423da525cfa708d04aa59fd7a.png](en-resource://database/794:1)\n\n* * *\n\n**版本删除**\n```bash\n如果使用 git rm 文件名, 这种操作属于暂存区删除,这种删除无法直接git checkout 文件名 来还原.\n如果直接执行git checkout 命令,则报错如下:\n```\n![5a38f5658fdfb97782184f8aeb3f0618.png](en-resource://database/793:1)\n\n```bash\n如果要还原在暂存区中删除的文件,必须先执行 git reset head\n```\n![14ea933479afc2006997a5e603dedc4a.png](en-resource://database/792:1)\n\n* * *\n\n**查看历史版本[查看日志]**\n```bash\ngit log   或者   git reflog\n \n过滤查看日志\n  git log –p \n  退出按【q】键\n  ctrl+f向下分页\n  ctrl+b 向上分页\n\n显示指定日期之后的日志   git log --after  '2018-11-6'\n显示指定日期之前的日志   git log --before '2018-11-6'\n\n指定显示指定开发者的日志  git log --author 'lisi'\n```\n\n* * *\n\n**回退版本**\n* * *\n* **方案一：**\n    * `HEAD`表示当前最新版本\n    * `HEAD^`表示当前最新版本的前一个版本\n    * `HEAD^^`表示当前最新版本的前两个版本，以此类推...\n    * `HEAD~1`表示当前最新版本的前一个版本\n    * `HEAD~10`表示当前最新版本的前10个版本，以此类推...\n\n```bash\ngit reset --hard HEAD^\n```\n"
    },
    {
        "title": "add-6",
        "url": "/2020/01/02/add-6/",
        "content": "**仓库目录的结构**\n```bash\nbranches/   分支管理目录\nconfig      当前项目仓木的配置信息\ndescription 当前项目的描述\nHEAD        当前项目仓库的当前版本信息\nhooks       当前项目仓库的钩子目录[可以利用这个目录下面的文件实现自己拉去代码到服务器]\ninfo        仓库相关信息\nobjects     仓库版本信息\nrefs        引用信息\n```\n\n* * *\n\n**配置用户名和邮箱**\n```bash\ngit config --global user.name 'jeremy'\ngit config --global user.email '865889915@qq.com'\n```\n![f72a05976e62de9760ff8884e34b46e0.png](en-resource://database/791:1)\n\n* * *\n\n**查看仓库状态**\n```bash\ngit status\n\ngit status –s 简约显示\n```\n\n* 红色表示新建文件或者新修改的文件,都在工作区.\n* 绿色表示文件在暂存区\n* 新建的`login.py`文件在工作区，需要添加到暂存区并提交到仓库区\n\n![ad28b346075e4738e79b474c4d5ef4bf.png](en-resource://database/789:1)\n\n上图表示： 暂时没有新文件需要提交到暂存区\n\n* * *\n\n**添加文件到暂存区**\n```bash\n  # 添加项目中所有文件\n  git add .\n  或者\n  # 添加指定文件\n  git add login.py\n```\n例如： 创建3个文件 ，并查看状态.\n\n* * *\n\n**提交到版本库**\n```bash\n git commit -am \"版本描述\"\n```\n\n* * *\n\n**手动删除文件**\n```bash\n手动操作删除 或者 在命令行下 使用 rm 文件名 删除 都是表示在工作区删除.\n对于这种删除,如果还原,则可以使用 git checkout 文件名\n```\n![b389bae423da525cfa708d04aa59fd7a.png](en-resource://database/794:1)\n\n* * *\n\n**版本删除**\n```bash\n如果使用 git rm 文件名, 这种操作属于暂存区删除,这种删除无法直接git checkout 文件名 来还原.\n如果直接执行git checkout 命令,则报错如下:\n```\n![5a38f5658fdfb97782184f8aeb3f0618.png](en-resource://database/793:1)\n\n```bash\n如果要还原在暂存区中删除的文件,必须先执行 git reset head\n```\n![14ea933479afc2006997a5e603dedc4a.png](en-resource://database/792:1)\n\n* * *\n\n**查看历史版本[查看日志]**\n```bash\ngit log   或者   git reflog\n \n过滤查看日志\n  git log –p \n  退出按【q】键\n  ctrl+f向下分页\n  ctrl+b 向上分页\n\n显示指定日期之后的日志   git log --after  '2018-11-6'\n显示指定日期之前的日志   git log --before '2018-11-6'\n\n指定显示指定开发者的日志  git log --author 'lisi'\n```\n\n* * *\n\n**回退版本**\n* * *\n* **方案一：**\n    * `HEAD`表示当前最新版本\n    * `HEAD^`表示当前最新版本的前一个版本\n    * `HEAD^^`表示当前最新版本的前两个版本，以此类推...\n    * `HEAD~1`表示当前最新版本的前一个版本\n    * `HEAD~10`表示当前最新版本的前10个版本，以此类推...\n\n```bash\ngit reset --hard HEAD^\n```\n"
    },
    {
        "title": "add-",
        "url": "/2020/01/02/add/",
        "content": "**仓库目录的结构**\n```bash\nbranches/   分支管理目录\nconfig      当前项目仓木的配置信息\ndescription 当前项目的描述\nHEAD        当前项目仓库的当前版本信息\nhooks       当前项目仓库的钩子目录[可以利用这个目录下面的文件实现自己拉去代码到服务器]\ninfo        仓库相关信息\nobjects     仓库版本信息\nrefs        引用信息\n```\n\n* * *\n\n**配置用户名和邮箱**\n```bash\ngit config --global user.name 'jeremy'\ngit config --global user.email '865889915@qq.com'\n```\n![f72a05976e62de9760ff8884e34b46e0.png](en-resource://database/791:1)\n\n* * *\n\n**查看仓库状态**\n```bash\ngit status\n\ngit status –s 简约显示\n```\n\n* 红色表示新建文件或者新修改的文件,都在工作区.\n* 绿色表示文件在暂存区\n* 新建的`login.py`文件在工作区，需要添加到暂存区并提交到仓库区\n\n![ad28b346075e4738e79b474c4d5ef4bf.png](en-resource://database/789:1)\n\n上图表示： 暂时没有新文件需要提交到暂存区\n\n* * *\n\n**添加文件到暂存区**\n```bash\n  # 添加项目中所有文件\n  git add .\n  或者\n  # 添加指定文件\n  git add login.py\n```\n例如： 创建3个文件 ，并查看状态.\n\n* * *\n\n**提交到版本库**\n```bash\n git commit -am \"版本描述\"\n```\n\n* * *\n\n**手动删除文件**\n```bash\n手动操作删除 或者 在命令行下 使用 rm 文件名 删除 都是表示在工作区删除.\n对于这种删除,如果还原,则可以使用 git checkout 文件名\n```\n![b389bae423da525cfa708d04aa59fd7a.png](en-resource://database/794:1)\n\n* * *\n\n**版本删除**\n```bash\n如果使用 git rm 文件名, 这种操作属于暂存区删除,这种删除无法直接git checkout 文件名 来还原.\n如果直接执行git checkout 命令,则报错如下:\n```\n![5a38f5658fdfb97782184f8aeb3f0618.png](en-resource://database/793:1)\n\n```bash\n如果要还原在暂存区中删除的文件,必须先执行 git reset head\n```\n![14ea933479afc2006997a5e603dedc4a.png](en-resource://database/792:1)\n\n* * *\n\n**查看历史版本[查看日志]**\n```bash\ngit log   或者   git reflog\n \n过滤查看日志\n  git log –p \n  退出按【q】键\n  ctrl+f向下分页\n  ctrl+b 向上分页\n\n显示指定日期之后的日志   git log --after  '2018-11-6'\n显示指定日期之前的日志   git log --before '2018-11-6'\n\n指定显示指定开发者的日志  git log --author 'lisi'\n```\n\n* * *\n\n**回退版本**\n* * *\n* **方案一：**\n    * `HEAD`表示当前最新版本\n    * `HEAD^`表示当前最新版本的前一个版本\n    * `HEAD^^`表示当前最新版本的前两个版本，以此类推...\n    * `HEAD~1`表示当前最新版本的前一个版本\n    * `HEAD~10`表示当前最新版本的前10个版本，以此类推...\n\n```bash\ngit reset --hard HEAD^\n```\n"
    },
    {
        "title": "add-5",
        "url": "/2020/01/02/add-5/",
        "content": "**仓库目录的结构**\n```bash\nbranches/   分支管理目录\nconfig      当前项目仓木的配置信息\ndescription 当前项目的描述\nHEAD        当前项目仓库的当前版本信息\nhooks       当前项目仓库的钩子目录[可以利用这个目录下面的文件实现自己拉去代码到服务器]\ninfo        仓库相关信息\nobjects     仓库版本信息\nrefs        引用信息\n```\n\n* * *\n\n**配置用户名和邮箱**\n```bash\ngit config --global user.name 'jeremy'\ngit config --global user.email '865889915@qq.com'\n```\n![f72a05976e62de9760ff8884e34b46e0.png](en-resource://database/791:1)\n\n* * *\n\n**查看仓库状态**\n```bash\ngit status\n\ngit status –s 简约显示\n```\n\n* 红色表示新建文件或者新修改的文件,都在工作区.\n* 绿色表示文件在暂存区\n* 新建的`login.py`文件在工作区，需要添加到暂存区并提交到仓库区\n\n![ad28b346075e4738e79b474c4d5ef4bf.png](en-resource://database/789:1)\n\n上图表示： 暂时没有新文件需要提交到暂存区\n\n* * *\n\n**添加文件到暂存区**\n```bash\n  # 添加项目中所有文件\n  git add .\n  或者\n  # 添加指定文件\n  git add login.py\n```\n例如： 创建3个文件 ，并查看状态.\n\n* * *\n\n**提交到版本库**\n```bash\n git commit -am \"版本描述\"\n```\n\n* * *\n\n**手动删除文件**\n```bash\n手动操作删除 或者 在命令行下 使用 rm 文件名 删除 都是表示在工作区删除.\n对于这种删除,如果还原,则可以使用 git checkout 文件名\n```\n![b389bae423da525cfa708d04aa59fd7a.png](en-resource://database/794:1)\n\n* * *\n\n**版本删除**\n```bash\n如果使用 git rm 文件名, 这种操作属于暂存区删除,这种删除无法直接git checkout 文件名 来还原.\n如果直接执行git checkout 命令,则报错如下:\n```\n![5a38f5658fdfb97782184f8aeb3f0618.png](en-resource://database/793:1)\n\n```bash\n如果要还原在暂存区中删除的文件,必须先执行 git reset head\n```\n![14ea933479afc2006997a5e603dedc4a.png](en-resource://database/792:1)\n\n* * *\n\n**查看历史版本[查看日志]**\n```bash\ngit log   或者   git reflog\n \n过滤查看日志\n  git log –p \n  退出按【q】键\n  ctrl+f向下分页\n  ctrl+b 向上分页\n\n显示指定日期之后的日志   git log --after  '2018-11-6'\n显示指定日期之前的日志   git log --before '2018-11-6'\n\n指定显示指定开发者的日志  git log --author 'lisi'\n```\n\n* * *\n\n**回退版本**\n* * *\n* **方案一：**\n    * `HEAD`表示当前最新版本\n    * `HEAD^`表示当前最新版本的前一个版本\n    * `HEAD^^`表示当前最新版本的前两个版本，以此类推...\n    * `HEAD~1`表示当前最新版本的前一个版本\n    * `HEAD~10`表示当前最新版本的前10个版本，以此类推...\n\n```bash\ngit reset --hard HEAD^\n```\n"
    },
    {
        "title": "add-4",
        "url": "/2020/01/02/add-4/",
        "content": "**仓库目录的结构**\n```bash\nbranches/   分支管理目录\nconfig      当前项目仓木的配置信息\ndescription 当前项目的描述\nHEAD        当前项目仓库的当前版本信息\nhooks       当前项目仓库的钩子目录[可以利用这个目录下面的文件实现自己拉去代码到服务器]\ninfo        仓库相关信息\nobjects     仓库版本信息\nrefs        引用信息\n```\n\n* * *\n\n**配置用户名和邮箱**\n```bash\ngit config --global user.name 'jeremy'\ngit config --global user.email '865889915@qq.com'\n```\n![f72a05976e62de9760ff8884e34b46e0.png](en-resource://database/791:1)\n\n* * *\n\n**查看仓库状态**\n```bash\ngit status\n\ngit status –s 简约显示\n```\n\n* 红色表示新建文件或者新修改的文件,都在工作区.\n* 绿色表示文件在暂存区\n* 新建的`login.py`文件在工作区，需要添加到暂存区并提交到仓库区\n\n![ad28b346075e4738e79b474c4d5ef4bf.png](en-resource://database/789:1)\n\n上图表示： 暂时没有新文件需要提交到暂存区\n\n* * *\n\n**添加文件到暂存区**\n```bash\n  # 添加项目中所有文件\n  git add .\n  或者\n  # 添加指定文件\n  git add login.py\n```\n例如： 创建3个文件 ，并查看状态.\n\n* * *\n\n**提交到版本库**\n```bash\n git commit -am \"版本描述\"\n```\n\n* * *\n\n**手动删除文件**\n```bash\n手动操作删除 或者 在命令行下 使用 rm 文件名 删除 都是表示在工作区删除.\n对于这种删除,如果还原,则可以使用 git checkout 文件名\n```\n![b389bae423da525cfa708d04aa59fd7a.png](en-resource://database/794:1)\n\n* * *\n\n**版本删除**\n```bash\n如果使用 git rm 文件名, 这种操作属于暂存区删除,这种删除无法直接git checkout 文件名 来还原.\n如果直接执行git checkout 命令,则报错如下:\n```\n![5a38f5658fdfb97782184f8aeb3f0618.png](en-resource://database/793:1)\n\n```bash\n如果要还原在暂存区中删除的文件,必须先执行 git reset head\n```\n![14ea933479afc2006997a5e603dedc4a.png](en-resource://database/792:1)\n\n* * *\n\n**查看历史版本[查看日志]**\n```bash\ngit log   或者   git reflog\n \n过滤查看日志\n  git log –p \n  退出按【q】键\n  ctrl+f向下分页\n  ctrl+b 向上分页\n\n显示指定日期之后的日志   git log --after  '2018-11-6'\n显示指定日期之前的日志   git log --before '2018-11-6'\n\n指定显示指定开发者的日志  git log --author 'lisi'\n```\n\n* * *\n\n**回退版本**\n* * *\n* **方案一：**\n    * `HEAD`表示当前最新版本\n    * `HEAD^`表示当前最新版本的前一个版本\n    * `HEAD^^`表示当前最新版本的前两个版本，以此类推...\n    * `HEAD~1`表示当前最新版本的前一个版本\n    * `HEAD~10`表示当前最新版本的前10个版本，以此类推...\n\n```bash\ngit reset --hard HEAD^\n```\n"
    },
    {
        "title": "add-3",
        "url": "/2020/01/02/add-3/",
        "content": "**仓库目录的结构**\n```bash\nbranches/   分支管理目录\nconfig      当前项目仓木的配置信息\ndescription 当前项目的描述\nHEAD        当前项目仓库的当前版本信息\nhooks       当前项目仓库的钩子目录[可以利用这个目录下面的文件实现自己拉去代码到服务器]\ninfo        仓库相关信息\nobjects     仓库版本信息\nrefs        引用信息\n```\n\n* * *\n\n**配置用户名和邮箱**\n```bash\ngit config --global user.name 'jeremy'\ngit config --global user.email '865889915@qq.com'\n```\n![f72a05976e62de9760ff8884e34b46e0.png](en-resource://database/791:1)\n\n* * *\n\n**查看仓库状态**\n```bash\ngit status\n\ngit status –s 简约显示\n```\n\n* 红色表示新建文件或者新修改的文件,都在工作区.\n* 绿色表示文件在暂存区\n* 新建的`login.py`文件在工作区，需要添加到暂存区并提交到仓库区\n\n![ad28b346075e4738e79b474c4d5ef4bf.png](en-resource://database/789:1)\n\n上图表示： 暂时没有新文件需要提交到暂存区\n\n* * *\n\n**添加文件到暂存区**\n```bash\n  # 添加项目中所有文件\n  git add .\n  或者\n  # 添加指定文件\n  git add login.py\n```\n例如： 创建3个文件 ，并查看状态.\n\n* * *\n\n**提交到版本库**\n```bash\n git commit -am \"版本描述\"\n```\n\n* * *\n\n**手动删除文件**\n```bash\n手动操作删除 或者 在命令行下 使用 rm 文件名 删除 都是表示在工作区删除.\n对于这种删除,如果还原,则可以使用 git checkout 文件名\n```\n![b389bae423da525cfa708d04aa59fd7a.png](en-resource://database/794:1)\n\n* * *\n\n**版本删除**\n```bash\n如果使用 git rm 文件名, 这种操作属于暂存区删除,这种删除无法直接git checkout 文件名 来还原.\n如果直接执行git checkout 命令,则报错如下:\n```\n![5a38f5658fdfb97782184f8aeb3f0618.png](en-resource://database/793:1)\n\n```bash\n如果要还原在暂存区中删除的文件,必须先执行 git reset head\n```\n![14ea933479afc2006997a5e603dedc4a.png](en-resource://database/792:1)\n\n* * *\n\n**查看历史版本[查看日志]**\n```bash\ngit log   或者   git reflog\n \n过滤查看日志\n  git log –p \n  退出按【q】键\n  ctrl+f向下分页\n  ctrl+b 向上分页\n\n显示指定日期之后的日志   git log --after  '2018-11-6'\n显示指定日期之前的日志   git log --before '2018-11-6'\n\n指定显示指定开发者的日志  git log --author 'lisi'\n```\n\n* * *\n\n**回退版本**\n* * *\n* **方案一：**\n    * `HEAD`表示当前最新版本\n    * `HEAD^`表示当前最新版本的前一个版本\n    * `HEAD^^`表示当前最新版本的前两个版本，以此类推...\n    * `HEAD~1`表示当前最新版本的前一个版本\n    * `HEAD~10`表示当前最新版本的前10个版本，以此类推...\n\n```bash\ngit reset --hard HEAD^\n```\n"
    },
    {
        "title": "add-2",
        "url": "/2020/01/02/add-2/",
        "content": "**仓库目录的结构**\n```bash\nbranches/   分支管理目录\nconfig      当前项目仓木的配置信息\ndescription 当前项目的描述\nHEAD        当前项目仓库的当前版本信息\nhooks       当前项目仓库的钩子目录[可以利用这个目录下面的文件实现自己拉去代码到服务器]\ninfo        仓库相关信息\nobjects     仓库版本信息\nrefs        引用信息\n```\n\n* * *\n\n**配置用户名和邮箱**\n```bash\ngit config --global user.name 'jeremy'\ngit config --global user.email '865889915@qq.com'\n```\n![f72a05976e62de9760ff8884e34b46e0.png](en-resource://database/791:1)\n\n* * *\n\n**查看仓库状态**\n```bash\ngit status\n\ngit status –s 简约显示\n```\n\n* 红色表示新建文件或者新修改的文件,都在工作区.\n* 绿色表示文件在暂存区\n* 新建的`login.py`文件在工作区，需要添加到暂存区并提交到仓库区\n\n![ad28b346075e4738e79b474c4d5ef4bf.png](en-resource://database/789:1)\n\n上图表示： 暂时没有新文件需要提交到暂存区\n\n* * *\n\n**添加文件到暂存区**\n```bash\n  # 添加项目中所有文件\n  git add .\n  或者\n  # 添加指定文件\n  git add login.py\n```\n例如： 创建3个文件 ，并查看状态.\n\n* * *\n\n**提交到版本库**\n```bash\n git commit -am \"版本描述\"\n```\n\n* * *\n\n**手动删除文件**\n```bash\n手动操作删除 或者 在命令行下 使用 rm 文件名 删除 都是表示在工作区删除.\n对于这种删除,如果还原,则可以使用 git checkout 文件名\n```\n![b389bae423da525cfa708d04aa59fd7a.png](en-resource://database/794:1)\n\n* * *\n\n**版本删除**\n```bash\n如果使用 git rm 文件名, 这种操作属于暂存区删除,这种删除无法直接git checkout 文件名 来还原.\n如果直接执行git checkout 命令,则报错如下:\n```\n![5a38f5658fdfb97782184f8aeb3f0618.png](en-resource://database/793:1)\n\n```bash\n如果要还原在暂存区中删除的文件,必须先执行 git reset head\n```\n![14ea933479afc2006997a5e603dedc4a.png](en-resource://database/792:1)\n\n* * *\n\n**查看历史版本[查看日志]**\n```bash\ngit log   或者   git reflog\n \n过滤查看日志\n  git log –p \n  退出按【q】键\n  ctrl+f向下分页\n  ctrl+b 向上分页\n\n显示指定日期之后的日志   git log --after  '2018-11-6'\n显示指定日期之前的日志   git log --before '2018-11-6'\n\n指定显示指定开发者的日志  git log --author 'lisi'\n```\n\n* * *\n\n**回退版本**\n* * *\n* **方案一：**\n    * `HEAD`表示当前最新版本\n    * `HEAD^`表示当前最新版本的前一个版本\n    * `HEAD^^`表示当前最新版本的前两个版本，以此类推...\n    * `HEAD~1`表示当前最新版本的前一个版本\n    * `HEAD~10`表示当前最新版本的前10个版本，以此类推...\n\n```bash\ngit reset --hard HEAD^\n```\n"
    },
    {
        "title": "add-1",
        "url": "/2020/01/02/add-1/",
        "content": "**仓库目录的结构**\n```bash\nbranches/   分支管理目录\nconfig      当前项目仓木的配置信息\ndescription 当前项目的描述\nHEAD        当前项目仓库的当前版本信息\nhooks       当前项目仓库的钩子目录[可以利用这个目录下面的文件实现自己拉去代码到服务器]\ninfo        仓库相关信息\nobjects     仓库版本信息\nrefs        引用信息\n```\n\n* * *\n\n**配置用户名和邮箱**\n```bash\ngit config --global user.name 'jeremy'\ngit config --global user.email '865889915@qq.com'\n```\n![f72a05976e62de9760ff8884e34b46e0.png](en-resource://database/791:1)\n\n* * *\n\n**查看仓库状态**\n```bash\ngit status\n\ngit status –s 简约显示\n```\n\n* 红色表示新建文件或者新修改的文件,都在工作区.\n* 绿色表示文件在暂存区\n* 新建的`login.py`文件在工作区，需要添加到暂存区并提交到仓库区\n\n![ad28b346075e4738e79b474c4d5ef4bf.png](en-resource://database/789:1)\n\n上图表示： 暂时没有新文件需要提交到暂存区\n\n* * *\n\n**添加文件到暂存区**\n```bash\n  # 添加项目中所有文件\n  git add .\n  或者\n  # 添加指定文件\n  git add login.py\n```\n例如： 创建3个文件 ，并查看状态.\n\n* * *\n\n**提交到版本库**\n```bash\n git commit -am \"版本描述\"\n```\n\n* * *\n\n**手动删除文件**\n```bash\n手动操作删除 或者 在命令行下 使用 rm 文件名 删除 都是表示在工作区删除.\n对于这种删除,如果还原,则可以使用 git checkout 文件名\n```\n![b389bae423da525cfa708d04aa59fd7a.png](en-resource://database/794:1)\n\n* * *\n\n**版本删除**\n```bash\n如果使用 git rm 文件名, 这种操作属于暂存区删除,这种删除无法直接git checkout 文件名 来还原.\n如果直接执行git checkout 命令,则报错如下:\n```\n![5a38f5658fdfb97782184f8aeb3f0618.png](en-resource://database/793:1)\n\n```bash\n如果要还原在暂存区中删除的文件,必须先执行 git reset head\n```\n![14ea933479afc2006997a5e603dedc4a.png](en-resource://database/792:1)\n\n* * *\n\n**查看历史版本[查看日志]**\n```bash\ngit log   或者   git reflog\n \n过滤查看日志\n  git log –p \n  退出按【q】键\n  ctrl+f向下分页\n  ctrl+b 向上分页\n\n显示指定日期之后的日志   git log --after  '2018-11-6'\n显示指定日期之前的日志   git log --before '2018-11-6'\n\n指定显示指定开发者的日志  git log --author 'lisi'\n```\n\n* * *\n\n**回退版本**\n* * *\n* **方案一：**\n    * `HEAD`表示当前最新版本\n    * `HEAD^`表示当前最新版本的前一个版本\n    * `HEAD^^`表示当前最新版本的前两个版本，以此类推...\n    * `HEAD~1`表示当前最新版本的前一个版本\n    * `HEAD~10`表示当前最新版本的前10个版本，以此类推...\n\n```bash\ngit reset --hard HEAD^\n```\n"
    },
    {
        "title": "addnew",
        "url": "/2020/01/02/addnew/",
        "content": "[TOC]\n## 如何多人协同开发同一个项目？\n使用代码版本控制[version control]软件,\n目前市面上比较流行的代码版本控制器有: git,svn,csv\n\n### 1、使用git管理代码版本\n本项目使用git管理项目代码，代码库放在gitee码云平台。（注意，公司中通常放在gitlab私有服务器中）\n\n#### 1.1、Git 的诞生\n2005 年 4 月3 日，Git 是目前世界上最先进的分布式版本控制系统（没有之一）\n作用：源代码管理\n\n**为什么要进行源代码管理?**\n\n* 方便多人协同开发\n* 方便版本控制\n\n#### 1.2、git与svn区别\n\nSVN 都是集中控制管理的，也就是有一个中央服务器，大家都把代码提交到中央服务器，而 git 是分布式的版本控制工具，也就是说没有中央服务器，每个节点的地位平等。\n\n**SVN**\n\n**Git**\n\n\n>注意:\n>    git 的使用分两种不同模式:\n>        1. 本地开发管理\n>        2. 远程开发管理\n\nGit工作区、暂存区和版本库\n\n### 2、工作区介绍\n就是在你本要电脑磁盘上能看到的目录。\n\n\n### 2、暂存区介绍\n一般存放在【.git】目录下的index文件(.git/index) 中，所以我们把暂存区有时也叫作索引。\n\n### 3、版本库介绍\n工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。git中的head/master是分支，是版本库。\n\n**git项目仓库的本地搭建**\n```html\ncd进入到自己希望存储代码的目录路径，并创建本地仓库.git\n新创建的本地仓库.git是个空仓库\n\n  cd 目录路径\n  git init gitdemo  # 如果没有声明目录,则自动把当前目录作为git仓库\n"
    },
    {
        "title": "Hello World",
        "url": "/2019/12/22/hello-world/",
        "content": "Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"
    }
]